"use strict";document.all&&!document.addEventListener&&(document.createElement("hot-table"),document.createElement("hot-column"),document.createElement("hot-autocomplete")),angular.module("ngHandsontable.services",[]),angular.module("ngHandsontable.directives",[]),angular.module("ngHandsontable",["ngHandsontable.services","ngHandsontable.directives"]),Handsontable.hooks.add("afterContextMenuShow",function(){Handsontable.eventManager.isHotTableEnv=!1}),function(){function autoCompleteFactory($parse){return{parseAutoComplete:function(column,dataSet,propertyOnly){column.source=function(query,process){var row=this.instance.getSelected()[0],source=[],data=dataSet[row];if(data){var options=column.optionList;if(options&&options.object){if(angular.isArray(options.object))source=options.object;else{var paramObject=$parse(options.object)(data);if(angular.isArray(paramObject))if(propertyOnly)for(var i=0,length=paramObject.length;i<length;i++){var item=paramObject[i][options.property];null!==item&&void 0!==item&&source.push(item)}else source=paramObject;else source=paramObject}process(source)}}}}}}autoCompleteFactory.$inject=["$parse"],angular.module("ngHandsontable.services").factory("autoCompleteFactory",autoCompleteFactory)}(),function(){function hotRegisterer(){var instances={};return{getInstance:function(id){return instances[id]},registerInstance:function(id,instance){instances[id]=instance},removeInstance:function(id){instances[id]=void 0}}}hotRegisterer.$inject=[],angular.module("ngHandsontable.services").factory("hotRegisterer",hotRegisterer)}(),function(){function hyphenate(string){return string.replace(/[A-Z]/g,function(match){return"-"+match.charAt(0).toLowerCase()})}function ucFirst(string){return string.substr(0,1).toUpperCase()+string.substr(1,string.length-1)}function settingFactory(hotRegisterer){return{containerClassName:"handsontable-container",initializeHandsontable:function(element,htSettings){var hot,container=document.createElement("div");return container.className=this.containerClassName,htSettings.hotId&&(container.id=htSettings.hotId),element[0].appendChild(container),hot=new Handsontable(container,htSettings),htSettings.hotId&&hotRegisterer.registerInstance(htSettings.hotId,hot),hot},updateHandsontableSettings:function(instance,settings){instance&&instance.updateSettings(settings)},renderHandsontable:function(instance){instance&&instance.render()},mergeSettingsFromScope:function(settings,scope){var htOptions,i,length,scopeOptions=angular.extend({},scope);for(settings=settings||{},angular.extend(scopeOptions,scope.settings||{}),htOptions=this.getAvailableSettings(),i=0,length=htOptions.length;i<length;i++)"undefined"!=typeof scopeOptions[htOptions[i]]&&(settings[htOptions[i]]=scopeOptions[htOptions[i]]);return settings},mergeHooksFromScope:function(settings,scope){var htHooks,i,length,attribute,scopeOptions=angular.extend({},scope);for(settings=settings||{},angular.extend(scopeOptions,scope.settings||{}),htHooks=this.getAvailableHooks(),i=0,length=htHooks.length;i<length;i++)attribute="on"+ucFirst(htHooks[i]),"function"!=typeof scopeOptions[htHooks[i]]&&"function"!=typeof scopeOptions[attribute]||(settings[htHooks[i]]=scopeOptions[htHooks[i]]||scopeOptions[attribute]);return settings},trimScopeDefinitionAccordingToAttrs:function(scopeDefinition,attrs){for(var i in scopeDefinition)scopeDefinition.hasOwnProperty(i)&&void 0===attrs[i]&&void 0===attrs[scopeDefinition[i].substr(1,scopeDefinition[i].length)]&&delete scopeDefinition[i];return scopeDefinition},getTableScopeDefinition:function(){var scopeDefinition={};return this.applyAvailableSettingsScopeDef(scopeDefinition),this.applyAvailableHooksScopeDef(scopeDefinition),scopeDefinition.datarows="=",scopeDefinition.dataschema="=",scopeDefinition.observeDomVisibility="=",scopeDefinition},getColumnScopeDefinition:function(){var scopeDefinition={};return this.applyAvailableSettingsScopeDef(scopeDefinition),scopeDefinition.data="@",scopeDefinition},applyAvailableSettingsScopeDef:function(scopeDefinition){var options,i,length;for(options=this.getAvailableSettings(),i=0,length=options.length;i<length;i++)scopeDefinition[options[i]]="=";return scopeDefinition},applyAvailableHooksScopeDef:function(scopeDefinition){var options,i,length;for(options=this.getAvailableHooks(),i=0,length=options.length;i<length;i++)scopeDefinition[options[i]]="=on"+ucFirst(options[i]);return scopeDefinition},getAvailableSettings:function(hyphenateStyle){var settings=Object.keys(Handsontable.DefaultSettings.prototype);return settings.indexOf("contextMenuCopyPaste")===-1&&settings.push("contextMenuCopyPaste"),settings.indexOf("handsontable")===-1&&settings.push("handsontable"),settings.indexOf("settings")>=0&&settings.splice(settings.indexOf("settings"),1),hyphenateStyle&&(settings=settings.map(hyphenate)),settings},getAvailableHooks:function(hyphenateStyle){var settings=Handsontable.hooks.getRegistered();return hyphenateStyle&&(settings=settings.map(function(hook){return"on-"+hyphenate(hook)})),settings}}}settingFactory.$inject=["hotRegisterer"],angular.module("ngHandsontable.services").factory("settingFactory",settingFactory)}(),function(){function hotAutocomplete(){return{restrict:"EA",scope:!0,require:"^hotColumn",link:function(scope,element,attrs,controllerInstance){var options=attrs.datarows;controllerInstance.setColumnOptionList(options)}}}hotAutocomplete.$inject=[],angular.module("ngHandsontable.directives").directive("hotAutocomplete",hotAutocomplete)}(),function(){function hotColumn(settingFactory){return{restrict:"EA",require:"^hotTable",scope:{},controller:["$scope",function($scope){this.setColumnOptionList=function(options){$scope.column||($scope.column={});var optionList={},match=options.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);match?(optionList.property=match[1],optionList.object=match[2]):optionList.object=options.split(","),$scope.column.optionList=optionList}}],compile:function(tElement,tAttrs){var _this=this;return this.scope=settingFactory.trimScopeDefinitionAccordingToAttrs(settingFactory.getColumnScopeDefinition(),tAttrs),angular.forEach(Object.keys(this.scope),function(key){_this.$$isolateBindings[key]={attrName:key,collection:!1,mode:"data"===key?"@":"=",optional:!1}}),function(scope,element,attrs,controllerInstance){var column={};angular.forEach(Object.keys(attrs),function(key){"$"!==key.charAt(0)&&""===attrs[key]&&(column[key]=!0)}),settingFactory.mergeSettingsFromScope(column,scope),scope.column||(scope.column={}),angular.extend(scope.column,column),controllerInstance.setColumnSetting(scope.column),scope.$on("$destroy",function(){controllerInstance.removeColumnSetting(scope.column)})}}}}hotColumn.$inject=["settingFactory"],angular.module("ngHandsontable.directives").directive("hotColumn",hotColumn)}(),function(){function hotTable(settingFactory,autoCompleteFactory,$rootScope,$parse){return{restrict:"EA",scope:{},priority:-400,controller:["$scope",function($scope){this.setColumnSetting=function(column){$scope.htSettings||($scope.htSettings={}),$scope.htSettings.columns||($scope.htSettings.columns=[]),$scope.htSettings.columns.push(column),settingFactory.updateHandsontableSettings($scope.hotInstance,$scope.htSettings)},this.removeColumnSetting=function(column){$scope.htSettings.columns.indexOf(column)>-1&&($scope.htSettings.columns.splice($scope.htSettings.columns.indexOf(column),1),settingFactory.updateHandsontableSettings($scope.hotInstance,$scope.htSettings))}}],compile:function(tElement,tAttrs){var bindingsKeys,_this=this;return this.scope=settingFactory.trimScopeDefinitionAccordingToAttrs(settingFactory.getTableScopeDefinition(),tAttrs),bindingsKeys=Object.keys(this.scope),angular.forEach(bindingsKeys,function(key){var mode=_this.scope[key].charAt(0);_this.$$isolateBindings[key]={attrName:_this.scope[key].length>1?_this.scope[key].substr(1,_this.scope[key].length):key,collection:"datarows"===key,mode:mode,optional:!1}}),function(scope,element,attrs){if(scope.settings=$parse(attrs.settings)(scope.$parent),scope.htSettings||(scope.htSettings={}),angular.forEach(Object.keys(attrs),function(key){"$"!==key.charAt(0)&&""===attrs[key]&&(scope.htSettings[key]=!0)}),settingFactory.mergeSettingsFromScope(scope.htSettings,scope),settingFactory.mergeHooksFromScope(scope.htSettings,scope),scope.htSettings.data||(scope.htSettings.data=scope.datarows),scope.htSettings.dataSchema=scope.dataschema,scope.htSettings.hotId=attrs.hotId,scope.htSettings.observeDOMVisibility=scope.observeDomVisibility,scope.htSettings.columns)for(var i=0,length=scope.htSettings.columns.length;i<length;i++){var column=scope.htSettings.columns[i];if("autocomplete"===column.type&&column.optionList){if("string"==typeof column.optionList){var optionList={},match=column.optionList.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);match?(optionList.property=match[1],optionList.object=match[2]):optionList.object=optionList,column.optionList=optionList}autoCompleteFactory.parseAutoComplete(column,scope.datarows,!0)}}var origAfterChange=scope.htSettings.afterChange;scope.htSettings.afterChange=function(){origAfterChange&&origAfterChange.apply(this,arguments),$rootScope.$$phase||scope.$apply()},scope.hotInstance=settingFactory.initializeHandsontable(element,scope.htSettings),angular.forEach(bindingsKeys,function(key){scope.$watch(key,function(newValue,oldValue){void 0!==newValue&&("datarows"===key?scope.hotInstance.getSettings().data===newValue?settingFactory.renderHandsontable(scope.hotInstance):(scope.hotInstance.loadData(newValue),scope.htSettings.data=newValue):newValue!==oldValue&&(scope.htSettings[key]=newValue,settingFactory.updateHandsontableSettings(scope.hotInstance,scope.htSettings)))},["datarows","columns","rowHeights","colWidths","rowHeaders","colHeaders"].indexOf(key)>=0)}),scope.$watch("datarows",function(newValue){void 0!==newValue&&scope.hotInstance.getSettings().data!==newValue&&scope.hotInstance.loadData(newValue)}),scope.$watchCollection("datarows",function(newValue,oldValue){oldValue&&oldValue.length===scope.htSettings.minSpareRows&&newValue.length!==scope.htSettings.minSpareRows&&(scope.htSettings.data=scope.datarows,settingFactory.updateHandsontableSettings(scope.hotInstance,scope.htSettings))})}}}}hotTable.$inject=["settingFactory","autoCompleteFactory","$rootScope","$parse"],angular.module("ngHandsontable.directives").directive("hotTable",hotTable)}();